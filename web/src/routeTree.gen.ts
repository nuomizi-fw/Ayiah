/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TvRouteImport } from './routes/tv'
import { Route as MovieRouteImport } from './routes/movie'
import { Route as LibrariesRouteImport } from './routes/libraries'
import { Route as HealthRouteImport } from './routes/health'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DetailIdRouteImport } from './routes/detail.$id'

const TvRoute = TvRouteImport.update({
  id: '/tv',
  path: '/tv',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieRoute = MovieRouteImport.update({
  id: '/movie',
  path: '/movie',
  getParentRoute: () => rootRouteImport,
} as any)
const LibrariesRoute = LibrariesRouteImport.update({
  id: '/libraries',
  path: '/libraries',
  getParentRoute: () => rootRouteImport,
} as any)
const HealthRoute = HealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DetailIdRoute = DetailIdRouteImport.update({
  id: '/detail/$id',
  path: '/detail/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
  '/libraries': typeof LibrariesRoute
  '/movie': typeof MovieRoute
  '/tv': typeof TvRoute
  '/detail/$id': typeof DetailIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
  '/libraries': typeof LibrariesRoute
  '/movie': typeof MovieRoute
  '/tv': typeof TvRoute
  '/detail/$id': typeof DetailIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
  '/libraries': typeof LibrariesRoute
  '/movie': typeof MovieRoute
  '/tv': typeof TvRoute
  '/detail/$id': typeof DetailIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/health' | '/libraries' | '/movie' | '/tv' | '/detail/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/health' | '/libraries' | '/movie' | '/tv' | '/detail/$id'
  id:
    | '__root__'
    | '/'
    | '/health'
    | '/libraries'
    | '/movie'
    | '/tv'
    | '/detail/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HealthRoute: typeof HealthRoute
  LibrariesRoute: typeof LibrariesRoute
  MovieRoute: typeof MovieRoute
  TvRoute: typeof TvRoute
  DetailIdRoute: typeof DetailIdRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/tv': {
      id: '/tv'
      path: '/tv'
      fullPath: '/tv'
      preLoaderRoute: typeof TvRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie': {
      id: '/movie'
      path: '/movie'
      fullPath: '/movie'
      preLoaderRoute: typeof MovieRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/libraries': {
      id: '/libraries'
      path: '/libraries'
      fullPath: '/libraries'
      preLoaderRoute: typeof LibrariesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/detail/$id': {
      id: '/detail/$id'
      path: '/detail/$id'
      fullPath: '/detail/$id'
      preLoaderRoute: typeof DetailIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HealthRoute: HealthRoute,
  LibrariesRoute: LibrariesRoute,
  MovieRoute: MovieRoute,
  TvRoute: TvRoute,
  DetailIdRoute: DetailIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
